<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	default-lazy-init="true"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
       
    <!-- =================================================================== -->
    <!-- Passport: Manager & Service                                         -->
    <!-- =================================================================== -->
    <bean id="httpClient" class="org.jasig.cas.util.HttpClient">
	    <property name="readTimeout" value="5000" />
	    <property name="connectionTimeout" value="5000" />
    </bean>
    
    <bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
        <property name="contextSource" ref="contextSource"/>
    </bean>
    
    <bean id="ldapUserDetailsManager" class="org.springframework.security.ldap.userdetails.LdapUserDetailsManager">
        <constructor-arg ref="contextSource" />
        <property name="groupSearchBase" value="${ldap.groups.search.dn}" />
        <property name="usernameMapper">
        	<bean class="org.springframework.security.ldap.DefaultLdapUsernameToDnMapper">
        		<constructor-arg index="0" value="${ldap.users.search.dn}" />
        		<constructor-arg index="1" value="cn" />
        	</bean>
        </property>
        <property name="userDetailsMapper">
            <bean class="com.ammob.passport.mapper.PersonMapper" />
        </property>
        <property name="attributesToRetrieve">
			<list>
				<value>cn</value>
				<value>userPassword</value>
				<value>sn</value>
				<value>givenName</value>
				<value>displayName</value>
				<value>description</value>
				<value>labeledURI</value>
				<value>mail</value>
				<value>st</value>
				<value>telephoneNumber</value>
				<value>entryUUID</value>
				<value>modifyTimestamp</value>
				<value>createTimestamp</value>
				<value>country</value>
				<value>province</value>
				<value>city</value>
				<value>postalAddress</value>
				<value>postalCode</value>
			</list>
        </property>
    </bean>
    
    <bean id="ldapUserDetailsService" class="org.springframework.security.ldap.userdetails.LdapUserDetailsService">
	    <constructor-arg ref="ldapUserSearch" />
	    <constructor-arg ref="ldapAuthoritiesPopulator" />
    </bean>
    
    <bean id="ldapUserSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
	    <constructor-arg value="${ldap.users.search.dn}" />
	    <constructor-arg value="(|(mail={0})(cn={0}))" />
	    <constructor-arg ref="contextSource" />
    </bean>
    
    <bean id="ldapAuthoritiesPopulator" class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
        <constructor-arg ref="contextSource" />
        <constructor-arg value="${ldap.groups.search.dn}" />
        <property name="groupRoleAttribute" value="cn" />
        <property name="groupSearchFilter" value="(uniqueMember={0})" />
        <property name="defaultRole" value="ROLE_USER" />
    </bean>
    
    <!--
        | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, 
        | AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
        | authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
        | until it finds one that both supports the Credentials presented and succeeds in authenticating.
        +-->
    <bean id="personAttributeRepository" class="org.jasig.services.persondir.support.ldap.LdapPersonAttributeAndRoleDao">
        <property name="ldapAuthoritiesPopulator" ref="ldapAuthoritiesPopulator" />
        <property name="baseDN" value="${ldap.users.search.dn}" />
        <property name="queryType" value="OR" />
        <property name="queryAttributeMapping">
            <map>
                <entry key="username" value="cn" />
                <entry key="mail" value="mail" />
            </map>
        </property>
        <property name="contextSource" ref="contextSource" />
        <property name="resultAttributeMapping">
            <map>
                <!-- Mapping beetween LDAP entry's attributes (key) and Principal"s (value) -->
                <entry key="cn" value="username" />
                <entry key="userPassword" value="password" />
                <entry key="sn" value="firstName" />
                <entry key="givenName" value="lastName" />
                <entry key="displayName" value="displayName" />
                <entry key="description" value="description" />
                <entry key="labeledURI" value="avataUrl" />
                <entry key="mail" value="email" />
                <entry key="st" value="state" />
                <entry key="telephoneNumber"  value="phoneNumber" />
                <entry key="entryUUID" value="uuid" />
                <entry key="authorities" value="authorities" />
                <entry key="modifyTimestamp" value="version" />
                <entry key="createTimestamp" value="regTime" />
                <entry key="country" value="address.country" />
                <entry key="province" value="address.province" />
                <entry key="city" value="address.city" />
                <entry key="postalAddress" value="address.postalAddress" />
                <entry key="postalCode" value="address.postalCode" />
            </map>
        </property>
    </bean>
    <!-- =================================================================== -->
    <!-- AOP: Configuration and Aspects                                      -->
    <!-- =================================================================== -->
    <aop:config>
        <aop:advisor id="userManagerTx" advice-ref="userManagerTxAdvice" pointcut="execution(* *..service.UserManager.*(..))" order="0"/>        
        <aop:advisor id="userManagerSecurity" advice-ref="userSecurityAdvice" pointcut="execution(* *..service.UserManager.saveUser(..))" order="1"/>
        <aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* *..service.*Manager.*(..))" order="2"/>
    </aop:config>
    
    <!-- Enable @Transactional support -->
    <tx:annotation-driven/>
    
    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy/>

    <!-- Activates scanning of @Autowired -->
    <context:annotation-config/>
    
    <!-- Activates scanning of @Service -->
    <context:component-scan base-package="com.ammob.passport.service"/>
    
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!-- Read-only commented out to make things easier for end-users -->
            <!-- http://issues.appfuse.org/browse/APF-556 -->
            <!--tx:method name="get*" read-only="true"/-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <tx:advice id="userManagerTxAdvice">
        <tx:attributes>
            <tx:method name="save*" rollback-for="UserExistsException"/>
        </tx:attributes>
    </tx:advice>
    
    <bean id="userSecurityAdvice" class="com.ammob.passport.service.UserSecurityAdvice"/>
    
    <!-- =================================================================== -->
    <!-- Mail: Sender and Velocity configuration                             -->
    <!-- =================================================================== -->
    <bean id="mailEngine" class="com.ammob.passport.service.MailEngine">
        <property name="mailSender" ref="mailSender"/>
        <property name="velocityEngine" ref="velocityEngine"/>
        <property name="from" value="${mail.default.from}"/>
    </bean>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}"/>
        <property name="defaultEncoding" value="UTF-8"/> 
        <!-- Uncomment if you need to authenticate with your SMTP Server -->
        <property name="username" value="${mail.username}"/>
        <property name="password" value="${mail.password}"/>
        <property name="javaMailProperties">
            <value>
                mail.smtp.auth=true
            </value>
        </property>
    </bean>

    <!-- Configure Velocity for sending e-mail -->
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <props>
	            <prop key="input.encoding">UTF-8</prop>
	            <prop key="output.encoding">UTF-8</prop>
                <prop key="resource.loader">class</prop>
                <prop key="class.resource.loader.class">org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader</prop>
                <prop key="velocimacro.library"></prop>
            </props>
        </property>
    </bean>

    <bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage" scope="prototype">
        <property name="from" value="${mail.default.from}"/>
    </bean>

    <!-- =================================================================== -->
    <!-- Security class from Spring Security - used to configure Password    -->
    <!-- Encryption in UserManagerImpl. Can override in security.xml.        -->
    <!-- =================================================================== -->
    <!-- <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" /> -->
    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder">
        <property name="encodeHashAsBase64" value="true"/>
    </bean>
    <bean id="passwordComparisonAuthenticator" class="org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator">
        <constructor-arg ref="contextSource" />
    </bean>
</beans>
