<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"
       default-lazy-init="true">

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
    
    <!-- EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitManager" ref="persistenceUnitManager"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="true" />
                <property name="showSql" value="true" />
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key=" hibernate.dialect">${hibernate.dialect}</prop>
                <prop key=" hibernate.query.substitutions">true 'Y', false 'N'</prop>
                <prop key=" hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
                <!-- Turn batching off for better error messages under PostgreSQL -->
                <!-- <prop key="hibernate.jdbc.batch_size">0</prop> -->
            </props>
        </property>
    </bean>

    <bean id="persistenceUnitManager" class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
        <property name="persistenceXmlLocations">
            <list>
                <value>classpath:META-INF/persistence.xml</value>
            </list>
        </property>
        <property name="defaultDataSource" ref="dataSource"/>
    </bean>

    <!-- Needed so the @PersistenceUnit annotation is recognized -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- Transaction manager for a single EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    
    <!-- Activates scanning of @Autowired -->
    <context:annotation-config/>

    <!-- Activates scanning of @Repository -->
    <context:component-scan base-package="com.ammob.passport.dao"/>

    <!-- Compass Search Section -->

    <!-- Compass Bean, automatically scanning for searchable classes within the model -->
    <!-- Hooks into Spring transaction management and stores the index on the file system -->
    <bean id="compass" class="org.compass.spring.LocalCompassBean">
        <property name="mappingScan" value="com.ammob.passport"/>
        <property name="transactionManager" ref="transactionManager" />
        <property name="settings">
            <map>
                <entry key="compass.engine.connection" value="ram://index"/>
            </map>
        </property>
    </bean>

    <!-- Compass Template allowing to automatically join/start exising transactions when performing operations -->
    <bean id="compassTemplate" class="org.compass.core.CompassTemplate">
        <property name="compass" ref="compass" />
    </bean>

    <!-- Compass Search Helper allowing to perform search operations in a simpler manner -->
    <bean id="compassSearchHelper" class="org.compass.core.support.search.CompassSearchHelper">
        <constructor-arg ref="compass" />
        <property name="pageSize" value="10" />
    </bean>

    <!-- CompassGps will automatically mirror any changes done thorugh Hibernate to searchable classes to the index -->
    <!-- It will also provide the index operation allowing to reindex the database -->
    <bean id="compassGps" class="org.compass.gps.impl.SingleCompassGps" init-method="start" destroy-method="stop">
        <property name="compass" ref="compass" />
        <property name="gpsDevices">
            <list>
                <bean class="org.compass.gps.device.jpa.JpaGpsDevice">
                    <property name="name" value="jpa" />
                    <property name="injectEntityLifecycleListener" value="true" />
                    <property name="entityManagerFactory" ref="entityManagerFactory" />
                </bean>
            </list>
        </property>
    </bean>
    <!--
	    | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, 
	    | AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
	    | authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
	    | until it finds one that both supports the Credentials presented and succeeds in authenticating.
	    +-->
    <bean id="personAttributeRepository" class="org.jasig.services.persondir.support.ldap.LdapPersonAttributeAndRoleDao">
        <property name="ldapAuthoritiesPopulator" ref="ldapAuthoritiesPopulator" />
        <property name="baseDN" value="${ldap.users.search.dn}" />
        <property name="queryType" value="OR" />
        <property name="queryAttributeMapping">
            <map>
                <entry key="username" value="cn" />
                <entry key="mail" value="mail" />
            </map>
        </property>
        <property name="contextSource" ref="contextSource" />
        <property name="resultAttributeMapping">
            <map>
                <!-- Mapping beetween LDAP entry's attributes (key) and Principal"s (value) -->
                <entry key="cn" value="username" />
                <entry key="userPassword" value="password" />
                <entry key="sn" value="firstName" />
                <entry key="givenName" value="lastName" />
                <entry key="displayName" value="displayName" />
                <entry key="description" value="description" />
                <entry key="photo" value="avataUrl" />
                <entry key="mail" value="email" />
                <entry key="st" value="state" />
                <entry key="telephoneNumber"  value="phoneNumber" />
                <entry key="entryUUID" value="uuid" />
                <entry key="authorities" value="authorities" />
                <entry key="modifyTimestamp" value="version" />
                <entry key="createTimestamp" value="regTime" />
                <entry key="country" value="address.country" />
                <entry key="province" value="address.province" />
                <entry key="city" value="address.city" />
                <entry key="postalAddress" value="address.postalAddress" />
                <entry key="postalCode" value="address.postalCode" />
            </map>
        </property>
    </bean>
</beans>
