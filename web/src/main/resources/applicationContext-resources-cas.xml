<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

    <aop:aspectj-autoproxy />
    <bean id="servicesManager" class="org.jasig.cas.services.DefaultServicesManagerImpl" >
        <constructor-arg index="0" ref="serviceRegistryDao" />
    </bean>
    <!-- Declare the TimingAspect that we want to weave into the other beans defined. -->
    <bean id="timingAspect" class="org.perf4j.log4j.aop.TimingAspect" />
    <!-- Job to periodically reload services from service registry. This job is needed for a clustered CAS environment since 
        service changes in one CAS node are not known to the other until a reload. -->
    <bean id="serviceRegistryReloaderJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
        p:targetObject-ref="servicesManager" p:targetMethod="reload" />
    <bean id="periodicServiceRegistryReloaderTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean"
        p:jobDetail-ref="serviceRegistryReloaderJobDetail" p:startDelay="120000" p:repeatInterval="120000" />
    <bean id="persistentIdGenerator" class="org.jasig.cas.authentication.principal.ShibbolethCompatiblePersistentIdGenerator" p:salt="casrocks" />
    <!-- CentralAuthenticationService -->
    <bean id="centralAuthenticationService" class="org.jasig.cas.CentralAuthenticationServiceImpl"
        p:ticketGrantingTicketExpirationPolicy-ref="grantingTicketExpirationPolicy" p:serviceTicketExpirationPolicy-ref="serviceTicketExpirationPolicy"
        p:authenticationManager-ref="authenticationManager" p:ticketGrantingTicketUniqueTicketIdGenerator-ref="ticketGrantingTicketUniqueIdGenerator"
        p:ticketRegistry-ref="ticketRegistry" p:servicesManager-ref="servicesManager" p:persistentIdGenerator-ref="persistentIdGenerator"
        p:uniqueTicketIdGeneratorsForService-ref="uniqueIdGeneratorsMap" />
    <bean id="proxy10Handler" class="org.jasig.cas.ticket.proxy.support.Cas10ProxyHandler" />
    <bean id="proxy20Handler" class="org.jasig.cas.ticket.proxy.support.Cas20ProxyHandler" p:httpClient-ref="httpClient"
        p:uniqueTicketIdGenerator-ref="proxy20TicketUniqueIdGenerator" />
    <!-- ADVISORS -->
    <bean id="advisorAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
    <bean id="validationAnnotationBeanPostProcessor" class="org.jasig.cas.util.CustomBeanValidationPostProcessor" p:afterInitialization="true" />
    <!-- The scheduler bean wires up any triggers that define scheduled tasks -->
    <bean id="scheduler" class="com.ammob.passport.webapp.spring.AutowiringSchedulerFactoryBean" />

    <!-- ********************************************** argumentExtractorsConfiguration.xml ********************************************** -->
    <bean id="casArgumentExtractor" class="org.jasig.cas.web.support.CasArgumentExtractor" p:httpClient-ref="httpClient" p:disableSingleSignOut="${slo.callbacks.disabled:false}" />
    <bean id="samlArgumentExtractor" class="org.jasig.cas.web.support.SamlArgumentExtractor" p:httpClient-ref="httpClient" p:disableSingleSignOut="${slo.callbacks.disabled:false}" />
    <util:list id="argumentExtractors">
        <ref bean="casArgumentExtractor" />
        <ref bean="samlArgumentExtractor" />
    </util:list>

    <!-- ********************************************** ticketExpirationPolicies.xml ********************************************** -->
    <!-- Expiration policies -->
    <util:constant id="SECONDS" static-field="java.util.concurrent.TimeUnit.SECONDS"/>
    <bean id="serviceTicketExpirationPolicy" class="org.jasig.cas.ticket.support.MultiTimeUseOrTimeoutExpirationPolicy"
          c:numberOfUses="1" c:timeToKill="${st.timeToKillInSeconds:10}" c:timeUnit-ref="SECONDS"/>

	<bean id="grantingTicketExpirationPolicy" class="org.jasig.cas.ticket.support.RememberMeDelegatingExpirationPolicy">
		<property name="sessionExpirationPolicy">
			<bean class="org.jasig.cas.ticket.support.TimeoutExpirationPolicy" c:timeToKillInMilliSeconds="${tgt.timeToKillInSeconds:7200}" /><!-- 2 Hour -->
		</property>
		<property name="rememberMeExpirationPolicy">
			<bean class="org.jasig.cas.ticket.support.TimeoutExpirationPolicy" c:timeToKillInMilliSeconds="${tgt.timeToKillInSeconds:604800}" /><!-- 7 Days -->
		</property>
    </bean>

    <!-- ********************************************** ticketGrantingTicketCookieGenerator.xml ********************************************** -->
    <bean id="ticketGrantingTicketCookieGenerator" class="org.jasig.cas.web.support.CookieRetrievingCookieGenerator" p:cookieDomain="${cas.cookise.domainname}"
        p:cookieSecure="false" p:cookieMaxAge="-1" p:cookieName="AuthTGC" p:cookiePath="/" />

    <!-- ********************************************** ticketRegistry.xml ********************************************** -->
	<!-- Ticket Registry -->
	<bean id="ticketRegistry" class="org.jasig.cas.ticket.registry.JpaTicketRegistry" />
    <!--Quartz -->
    <!-- TICKET REGISTRY CLEANER 
    <bean id="ticketRegistryCleaner" class="org.jasig.cas.ticket.registry.support.DefaultTicketRegistryCleaner" p:ticketRegistry-ref="ticketRegistry" p:lock-ref="cleanerLock" />
	<bean id="cleanerLock" class="org.jasig.cas.ticket.registry.support.JpaLockingStrategy" p:uniqueId="${host.name}" p:applicationId="cas-ticket-registry-cleaner" />
	<bean id="ticketRegistryCleanerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="ticketRegistryCleaner" p:targetMethod="clean" />
	<bean id="periodicTicketRegistryCleanerTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean" p:jobDetail-ref="ticketRegistryCleanerJobDetail" 
	    p:startDelay="20000" p:repeatInterval="1800000" />-->

    <!-- ********************************************** uniqueIdGenerators.xml ********************************************** -->
    <!-- ID Generators -->
    <bean id="ticketGrantingTicketUniqueIdGenerator" class="org.jasig.cas.util.DefaultUniqueTicketIdGenerator">
        <constructor-arg index="0" type="int" value="50" />
        <constructor-arg index="1" value="${host.name}" />
    </bean>

    <bean id="serviceTicketUniqueIdGenerator" class="org.jasig.cas.util.DefaultUniqueTicketIdGenerator">
        <constructor-arg index="0" type="int" value="20" />
        <constructor-arg index="1" value="${host.name}" />
    </bean>

    <bean id="loginTicketUniqueIdGenerator" class="org.jasig.cas.util.DefaultUniqueTicketIdGenerator">
        <constructor-arg index="0" type="int" value="30" />
    </bean>

    <bean id="proxy20TicketUniqueIdGenerator" class="org.jasig.cas.util.DefaultUniqueTicketIdGenerator">
        <constructor-arg index="0" type="int" value="20" />
        <constructor-arg index="1" value="${host.name}" />
    </bean>

    <bean id="samlServiceTicketUniqueIdGenerator" class="org.jasig.cas.util.SamlCompliantUniqueTicketIdGenerator">
        <constructor-arg index="0" value="https://localhost:8443" />
    </bean>

    <util:map id="uniqueIdGeneratorsMap">
        <entry key="org.jasig.cas.authentication.principal.SimpleWebApplicationServiceImpl" value-ref="serviceTicketUniqueIdGenerator" />
        <entry key="org.jasig.cas.authentication.principal.SamlService" value-ref="samlServiceTicketUniqueIdGenerator" />
        <entry key="org.jasig.cas.authentication.principal.GoogleAccountsService" value-ref="serviceTicketUniqueIdGenerator" />
    </util:map>
    
    <!-- ********************************************** warnCookieGenerator.xml ********************************************** -->
    <bean id="warnCookieGenerator" class="org.jasig.cas.web.support.CookieRetrievingCookieGenerator"
        p:cookieSecure="false"
        p:cookieMaxAge="-1"
        p:cookieName="AuthPrivacy"
        p:cookiePath="/" />

    <!-- ********************************************** deployerConfigContext.xml ********************************************** -->
    <bean id="authenticationManager" class="org.jasig.cas.authentication.AuthenticationManagerImpl">
        <property name="credentialsToPrincipalResolvers">
            <list>
                <bean class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />
                <bean class="org.jasig.cas.authentication.principal.CredentialsToLDAPAttributePrincipalResolver" >
                    <property name="credentialsToPrincipalResolver">
                        <bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver" />
                    </property>
                    <property name="filter" value="(|(mail=%u)(cn=%u))" />
                    <property name="principalAttributeName" value="cn" />
                    <property name="searchBase" value="${ldap.users.search.dn}" />
                    <property name="contextSource" ref="contextSource" />
                    <property name="attributeRepository" ref="personAttributeRepository" />
                </bean>
            </list>
        </property>
        <property name="authenticationHandlers">
            <list>
                <bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler" p:httpClient-ref="httpClient" />
				<bean class="org.jasig.cas.adaptors.ldap.BindLdapAuthenticationHandler" 
				        p:filter="(|(mail=%u)(cn=%u))" p:searchBase="${ldap.users.search.dn}" p:contextSource-ref="contextSource" 
				        p:searchContextSource-ref="pooledContextSource" p:ignorePartialResultException="yes">
					<property name="ldapErrorDefinitions">
						<list>
							<bean class="org.jasig.cas.adaptors.ldap.LdapErrorDefinition" p:ldapPattern="data 530" p:type="badHours" />
							<bean class="org.jasig.cas.adaptors.ldap.LdapErrorDefinition" p:ldapPattern="data 533" p:type="accountDisabled" />
							<bean class="org.jasig.cas.adaptors.ldap.LdapErrorDefinition" p:ldapPattern="data 773" p:type="mustChangePassword" />
							<bean class="org.jasig.cas.adaptors.ldap.LdapErrorDefinition" p:ldapPattern="data 775" p:type="accountLocked" />
							<bean class="org.jasig.cas.adaptors.ldap.LdapErrorDefinition" p:ldapPattern="data 531" p:type="badWorkstation" />
							<bean class="org.jasig.cas.adaptors.ldap.LdapErrorDefinition" p:ldapPattern="data (701|532)" p:type="passwordExpired" />
						</list>
					</property>
				</bean>
                <bean class="com.ammob.passport.authentication.handler.CustomAuthenticationHandler" />
            </list>
        </property>
		<property name="authenticationMetaDataPopulators">
			<list>
				<bean class="org.jasig.cas.authentication.SamlAuthenticationMetaDataPopulator" />
			    <bean class="org.jasig.cas.authentication.principal.RememberMeAuthenticationMetaDataPopulator" />
			</list>
		</property>
    </bean>

    <bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">
        <property name="registeredServices">
            <list>
                    <bean class="org.jasig.cas.services.RegexRegisteredService">
                        <property name="id" value="0" />
                        <property name="name" value="HTTP and IMAP" />
                        <property name="description" value="Allows HTTP(S) and IMAP(S) protocols" />
                        <property name="serviceId" value="^(https?|imaps?)://.*" />
                        <property name="evaluationOrder" value="10000001" />
                        <property name="allowedAttributes">
						    <list>
				                <value>username</value>
				                <value>password</value>
				                <value>firstName</value>
				                <value>lastName</value>
				                <value>displayName</value>
				                <value>description</value>
				                <value>avataUrl</value>
				                <value>email</value>
				                <value>state</value>
				                <value>phoneNumber</value>
				                <value>uuid</value>
				                <value>authorities</value>
				                <value>regTime</value>
				                <value>address.country</value>
				                <value>address.province</value>
				                <value>address.city</value>
				                <value>address.postalAddress</value>
				                <value>address.postalCode</value>
						    </list>             
					    </property>
                    </bean>
            </list>
        </property>
    </bean>
	<bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor">
		<property name="monitors">
			<list>
				<bean class="org.jasig.cas.monitor.MemoryMonitor"
					p:freeMemoryWarnThreshold="10" />
				<!-- NOTE The following ticket registries support SessionMonitor: * DefaultTicketRegistry 
					* JpaTicketRegistry Remove this monitor if you use an unsupported registry. -->
				<bean class="org.jasig.cas.monitor.SessionMonitor"
					p:ticketRegistry-ref="ticketRegistry"
					p:serviceTicketCountWarnThreshold="5000"
					p:sessionCountWarnThreshold="100000" />
			</list>
		</property>
	</bean>
</beans>